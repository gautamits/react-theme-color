{"version":3,"sources":["ChangeColor.jsx","App.js","serviceWorker.js","index.js"],"names":["ChangeColor","_ref","color","colors","random","delay","reset","children","getRandomRGBValue","Math","min","floor","changeColor","node","document","querySelector","Array","isArray","randomIndex","length","toString","slice","getRandomColor","setAttribute","useEffect","prevColor","getAttribute","myInterval","clearInterval","setInterval","App","_useState","useState","_useState2","Object","slicedToArray","change","toggleChange","_useState3","_useState4","_useState5","_useState6","isRandom","toggleRandom","react_default","a","createElement","className","type","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAEeA,EAAA,SAAAC,GAAmD,IAAjDC,EAAiDD,EAAjDC,MAAOC,EAA0CF,EAA1CE,OAAQC,EAAkCH,EAAlCG,OAAQC,EAA0BJ,EAA1BI,MAAOC,EAAmBL,EAAnBK,MAAOC,EAAYN,EAAZM,SAClD,SAASC,IACL,OAAOC,KAAKC,IAAID,KAAKE,MAAsB,IAAhBF,KAAKL,SAAiB,GAAI,KAezD,SAASQ,IACL,IAAIC,EAAOC,SAASC,cAAc,0BAC9BF,IACDT,IACCF,EAhBR,WACI,GAAGC,GAAUa,MAAMC,QAAQd,GAAQ,CAC/B,IAAIe,EAAcT,KAAKE,MAAMF,KAAKL,UAAYD,EAAOgB,OAAS,IAC9D,OAAOhB,EAAOe,GAKlB,MAAO,MAAS,GAAK,KAHbV,KAGyB,KAFzBA,KAEqC,GADrCA,KAC6CY,SAAS,IAAIC,MAAM,GAQ9DC,IAEPpB,GACCW,EAAKU,aAAa,UAAUrB,IAsBpC,OAlBAsB,oBAAU,WACN,IAAIC,EACAZ,EAAOC,SAASC,cAAc,0BAClC,GAAIF,EAEJ,OADAY,EAAYZ,EAAKa,aAAa,WAC3BpB,EAAc,WACbO,EAAKU,aAAa,UAAUE,SADhC,GAGF,IAEFD,oBAAU,WACN,IAAIG,EACJf,IACGP,IACCuB,cAAcD,GACdA,EAAaE,YAAYjB,EAAaP,MAGvCE,SC9BIuB,MAdf,WAAe,IAAAC,EACkBC,oBAAS,GAD3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEgBN,mBAAS,WAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENpC,EAFMqC,EAAA,GAEC3B,EAFD2B,EAAA,GAAAC,EAGoBR,oBAAS,GAH7BS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGNE,EAHMD,EAAA,GAGIE,EAHJF,EAAA,GAIb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,MAAOb,EAAQc,SAAU,SAAAC,GAAC,OAAEd,GAAcD,OAC9EQ,EAAAC,EAAAC,cAAA,SAAOE,KAAK,QAAQC,MAAO/C,EAAOgD,SAAU,SAAAC,GAAC,OAAEvC,EAAYuC,EAAEC,OAAOH,UACpEL,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,MAAOP,EAAUQ,SAAU,SAAAC,GAAC,OAAER,GAAcD,OAC/EN,GAAUQ,EAAAC,EAAAC,cAAC9C,EAAD,CAAaI,OAAQsC,EAAUxC,MAAOA,GAAtC,WCDGmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAAS9C,SAAS+C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.35b8f4aa.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\n\nexport default ({color, colors, random, delay, reset, children})=>{\n    function getRandomRGBValue() {\n        return Math.min(Math.floor(Math.random() * 255 + 1), 255);\n    }\n    \n    function getRandomColor() {\n        if(colors && Array.isArray(colors)){\n            let randomIndex = Math.floor(Math.random() * (colors.length - 1));\n            return colors[randomIndex]\n        }\n        var r = getRandomRGBValue(),\n            g = getRandomRGBValue(),\n            b = getRandomRGBValue();\n        return \"#\" + (((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1));\n    }\n\n\n    function changeColor(){\n        let node = document.querySelector(\"meta[name=theme-color]\")\n        if(!node) return\n        if(random){\n            color=getRandomColor()\n        }\n        if(color){\n            node.setAttribute(\"content\",color)\n        }\n    }\n\n    useEffect(()=>{\n        var prevColor;\n        let node = document.querySelector(\"meta[name=theme-color]\")\n        if(!node) return\n        prevColor = node.getAttribute(\"content\")\n        if(reset) return ()=>{\n            node.setAttribute(\"content\",prevColor)\n        }\n    },[])\n\n    useEffect(()=>{\n        var myInterval\n        changeColor()\n        if(delay){\n            clearInterval(myInterval)\n            myInterval = setInterval(changeColor, delay)\n        }\n    })\n    return children\n}","import React, {useState, useEffect} from 'react';\nimport ChangeColor from './ChangeColor'\nimport './App.css';\n\nfunction App() {\n  const [change, toggleChange] = useState(false)\n  const [color, changeColor] = useState(\"#458eff\")\n  const [isRandom, toggleRandom] = useState(false)\n  return (\n    <div className=\"App\">\n      <label>change<input type=\"checkbox\" value={change} onChange={e=>toggleChange(!change)}/></label>\n      <input type=\"color\" value={color} onChange={e=>changeColor(e.target.value)}/>\n      <label>random<input type=\"checkbox\" value={isRandom} onChange={e=>toggleRandom(!isRandom)}/></label>\n      {change && <ChangeColor random={isRandom} color={color}>hello</ChangeColor>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}